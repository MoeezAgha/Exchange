@page "/login"

@inherits BarterBaseComponent<Login>
@using Exchange.UI.Library.Helper.StateProviderHelper;
 @using Exchange.Library.DataTransferObject.Account;


<h3>Login</h3>
<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="true" AllowResetPassword="true" Username=@loginModel.Username Password=@loginModel.Password
                     AllowRememberMe="true" RememberMe="@loginModel.RememberMe"
                     Login=@(args => OnLogin(args))
                     ResetPassword=@(args => OnResetPassword(args, "Login with default values"))
                     Register=@(args => OnRegister("Login with default values")) />
    </RadzenTemplateForm>
</RadzenCard>


@code {
    public LoginViewModel loginModel { get; set; } = new LoginViewModel();
    [Inject]
    public NavigationMenuSeriveEvent _navigationMenuSeriveEvent { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }
    string userName = "yahoo222";
    string password = "Yahoo580@@##";
    bool rememberMe = true;
    protected override async Task OnInitializedAsync()
    {

        loginModel.Username = userName;
        loginModel.Password = password;
    }

    public async Task OnLogin(LoginArgs loginArgs)
    {
        var authStatez = await _customAuthenticationStateProvider.GetAuthenticationStateAsync();
        var userz = authStatez.User;

        var response = await ApplicationHttpClient 
        .PostJsonAsync<LoginViewModel, TokenResponse>("Authentication/login", loginModel);

        if (response.statusCode == HttpStatusCode.OK)
        {
            await _localStorageService.SetItemAsync("token", response.Data.Token);
            _navigationMenuSeriveEvent.RefreshNavMenuChanges();
            await _customAuthenticationStateProvider.NotifyAuthenticationStateChanged();
            var authState = await _customAuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (authState.User.Identity.IsAuthenticated)
            {
                
                _navigationManager.NavigateTo("/",true);
            }

            //
        }
        else
        {
            // Handle login failure, consider using a notification service to inform the user
        }
    }

    void OnRegister(string name)
    {
        // Implement registration logic or navigation
    }

    void OnResetPassword(string value, string name)
    {
        // Implement password reset logic or navigation
    }
}
